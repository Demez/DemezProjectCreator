import sys
import os

c_cpp_extensions = [
    'c',
    'cpp',
    'cc',
    'cxx',
    'c++'
]

def MkIfEq(a, b, body):
    indented = '\t' + '\n\t'.join(body.split('\n'))
    return f"\nifeq ({a},{b})\n{body}\nendif\n"

def GenGnuCFlags( conf ):
    mk = ""
    if len(conf.compiler.preprocessor_definitions) > 0:
        mk +=' -D ' + ' -D '.join(conf.compiler.preprocessor_definitions)
    if len(conf.linker.libraries):
        mk +=' -l' + ' -l'.join(conf.linker.libraries)
    if len(conf.general.library_directories):
        mk += ' -L' + ' -L'.join(conf.general.library_directories)
    return mk

# TODO: add a non-gnu flag option (/ instead of --, etc)
def GenCompileExeGnu( compiler, conf ):
    return f"{compiler} -o $@ $(SOURCES) {GenGnuCFlags(conf)}"

def GenCompileDynGnu( compiler, conf ):
    return f"{compiler} -static -o $@ $(SOURCES) {GenGnuCFlags(conf)}"

def GenProjectTargets( conf ):
    makefile = "\n\n# TARGETS\n\n"
    target_name = ""
    # theres got to be a better way to do this but im tired
    if conf.linker.output_file:
        target_name = conf.linker.output_file
    else:
        target_name = "$(OUTNAME)"

    if True: #conf.general.toolset_version == "gcc":
        lang_switch = {"c": "gcc", "cpp": "g++", "c++": "g++"}
        compiler = lang_switch[conf.general.language]

    if conf.general.configuration_type == "application":
        makefile += f"{target_name}: $(SOURCES) $(FILES)\n"
        makefile += '\t' + '\n\t'.join(GenCompileExeGnu(compiler, conf).split('\n'))
    elif conf.general.configuration_type == "dynamic_library":
        makefile += f"$(addsuffix .so,{target_name}): $(SOURCES), $(FILES)\n"
        makefile += '\t' + '\n\t'.join(GenCompileDynGnu(compiler, conf).split('\n'))

    return makefile

def GenProjectVars( project ):

    makefile = "\n# SOURCE FILES:\n\n"
    makefile += "SOURCES = " + '\t\\\n\t'.join(project.source_files) + "\n"

    makefile += "\n# AUX FILES:\n\n"
    makefile += "FILES = " + '\t\\\n\t'.join(project.files) + "\n"

    makefile += "\n# MACROS:\n\n"
    try:
        makefile += "OUTNAME = " + project.macros["$PROJECT_NAME"]
    except KeyError:
        makefile += "OUTNAME = default"

    makefile += GenProjectTargets(project.config)

    # print(project.config)

    return MkIfEq(project.config_name, "$(CONFIG)",
        MkIfEq(project.platform, "$(PLATFORM)", makefile))

def GetPlatform():
    p = sys.platform
    if sys.maxsize > 2**32:
        p += "64"
    else:
        p += "32"

    return p

def GenDefines( toolset ):
    return f"""#!/usr/bin/make -f


# MAKEFILE GENERATED BY QPC
# IF YOU ARE READING THIS AND DID NOT GENERATE THIS FILE WITH QPC,
# IT PROBABLY WILL NOT WORK. DOWNLOAD QPC AND BUILD THE MAKEFILE
# YOURSELF.


# |￣￣￣￣￣￣￣￣|  
# |    make > *    |
# |＿＿＿＿＿＿＿＿|
# (\__/) || 
# (•ㅅ•) || 
# / 　 づ  

# don't mess with this, might break stuff
PLATFORM = {GetPlatform()}
# change the config with CONFIG=[Release,Debug] to make
CONFIG = Debug
# edit this in your QPC script configuration/general/toolset-version
TOOLSET-VERSION = gcc


############################
### BEGIN BUILD TARGETS ###
###########################
"""

def CreateProject( projects ):
    print("CREATING MAKEFILE")
    makefile = GenDefines(projects.projects[0].config.general.toolset_version)

    for p in projects.projects:
        makefile += GenProjectVars(p)
        
    with open("makefile", "w") as f:
        f.write(makefile)
